
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

group = 'fr.univ-nantes.julestar'
archivesBaseName = 'uima-stemmer'
version = '1.2'

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

if(hasProperty("signing.keyId")) {
	// activate signing of artifacts, only if signing is configured properly
	signing {
		sign configurations.archives
	}
}

dependencies {
  compile 'org.apache.uima:uimaj-core:2.10.0'
  compile "org.apache.uima:uimafit-core:2.3.0"
}

repositories {
	mavenLocal()
	mavenCentral()
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId group
			artifactId archivesBaseName
			version version

			from components.java
		}
	}
}

if(hasProperty("ossrh.username")) {
	uploadArchives {
		repositories {
		  mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
			  authentication(userName: project.getProperty("ossrh.username"), password: project.getProperty("ossrh.password"))
			}
	
			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
			  authentication(userName: project.getProperty("ossrh.username"), password: project.getProperty("ossrh.password"))
			}
	
			pom.project {
			  name 'UIMA Stemmer'
			  packaging 'jar'
			  // optionally artifactId can be defined here
			  description ' A UIMA Analysis Engine wrapper for the snowball stemmer '
			  url 'https://github.com/JuleStar/uima-stemmer'
	
			  scm {
				  connection 'scm:git:git@github.com:julestar/uima-stemmer.git'
				  developerConnection 'scm:git:git@github.com:julestar/uima-stemmer.git'
				  url 'git@github.com:julestar/uima-stemmer.git'
			  }
	
			  licenses {
				  license {
					  name 'The Apache License, Version 2.0'
					  url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
				  }
			  }
	
			  developers {
				  developer {
					  id getProperty("developer.id")
					  name getProperty("developer.name")
					  email getProperty("developer.email")
				  }
			  }
			}
		  }
		}
	}
} else {
def msg = "Publishing to maven central (task uploadArchives) is not possible since no gradle property file is found (use \"\$ cp gradle.properties.sample gradle.properties\")"
logger.warn(msg)
}
